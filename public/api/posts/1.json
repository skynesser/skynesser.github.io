{"total":28,"pageSize":12,"pageCount":3,"data":[{"title":"floyd-1217Arbitrage","uid":"806b171956b8db1807b5f04e4d164ca5","slug":"floyd-1217Arbitrage","date":"2022-04-20T12:48:26.000Z","updated":"2022-04-22T12:03:25.487Z","comments":true,"path":"api/articles/floyd-1217Arbitrage.json","cover":[],"text":"floyd-1217ArbitragePDF 题意 给出种货币，并给出种兑换规则，是否存在某种兑换方式，可以赚得金额。 思路 对于所有的货币，转换成点，对于两种货币之间的汇率，可以理解为路径的权值，使用floyd算法，若存在货币从自己到自己的汇率大于1，则可以赚的金额。 更新汇率...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"题解","slug":"题解","count":8,"path":"api/categories/题解.json"}],"tags":[{"name":"floyd","slug":"floyd","count":2,"path":"api/tags/floyd.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"floyd","uid":"db79dd4bf0c0863dacbb4795db31c4b4","slug":"floyd","date":"2022-04-20T12:46:55.000Z","updated":"2022-04-22T12:42:53.662Z","comments":true,"path":"api/articles/floyd.json","cover":[],"text":"floydPDF floyd介绍 一种基于动态规划的，可以求解任意两点最短距离的算法。 floyd算法思想 floyd的基于一种简单的想法，想要更新两个点之间的距离，必须借助于其它的点。那么我们不妨令表示借助前个点和之间的最小距离(实际枚举过程中这一维是没有必要的)。想要借助于某...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":2,"path":"api/categories/图论.json"}],"tags":[{"name":"floyd","slug":"floyd","count":2,"path":"api/tags/floyd.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"深度学习实践(一)","uid":"83b7dc2eb934f81e8d103598a597ca71","slug":"深度学习实践一","date":"2022-04-20T05:48:18.000Z","updated":"2022-04-20T12:09:04.903Z","comments":true,"path":"api/articles/深度学习实践一.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"人工智能","slug":"人工智能","count":2,"path":"api/categories/人工智能.json"}],"tags":[{"name":"深度学习","slug":"深度学习","count":1,"path":"api/tags/深度学习.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Go Web 入门实战(一)","uid":"08acd2404811ef59f627dc231b1ae07c","slug":"Go-Web-入门实战一","date":"2022-04-20T05:43:34.000Z","updated":"2022-04-21T02:23:38.000Z","comments":true,"path":"api/articles/Go-Web-入门实战一.json","cover":[],"text":"Go Web 入门实战(一)点击此处,下载PDF 前言 该系列既是博客也是我的学习笔记，我将从这里开始记录下我在学习过程中的点点滴滴并把它分享出来。我们会用Go Web的知识从零开始搭建一个博客。关于Go的各种环境搭配，不会进行过多的介绍，这里全部的任务都是用Goland完成的，...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Go","slug":"Go","count":1,"path":"api/categories/Go.json"}],"tags":[{"name":"Go Web","slug":"Go-Web","count":1,"path":"api/tags/Go-Web.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS","uid":"750466a07204eea158a8ccd364ba109b","slug":"BFS","date":"2022-04-18T00:24:11.000Z","updated":"2022-04-20T12:07:45.809Z","comments":true,"path":"api/articles/BFS.json","cover":[],"text":"BFS博客的PDF点击此处下载 什么是BFS BFS全称为Breadth First Search，中文名广度优先搜索或宽度优先搜索。 广度优先即按层去遍历整个图，一层访问结束后再去访问下一层。 算法过程可以看做是图上火苗传播的过程：最开始只有起点着火了，在每一时刻，有火的节点都...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"图论","slug":"图论","count":2,"path":"api/categories/图论.json"}],"tags":[{"name":"BFS","slug":"BFS","count":1,"path":"api/tags/BFS.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"AtCoder Beginner Contest 248","uid":"2d6b2269a15455f29ea7408d5e9ec9fe","slug":"AtCoder-Beginner-Contest-248","date":"2022-04-17T06:36:25.000Z","updated":"2022-04-18T01:26:58.208Z","comments":true,"path":"api/articles/AtCoder-Beginner-Contest-248.json","cover":[],"text":"AtCoder Beginner Contest 248 下载PDF，获得别样的观看体验 A - Lacked Number题意： 给出10个数字，输出0~9中未出现的那个数字。 思路： 统计数字出现情况即可。 时间复杂度： AC代码：#include&lt;bits/stdc+...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"题解","slug":"题解","count":8,"path":"api/categories/题解.json"}],"tags":[{"name":"Atcoder","slug":"Atcoder","count":3,"path":"api/tags/Atcoder.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"hexo教程--教你半个小时搭建自己的博客","uid":"f5cdf4952ba5a694914b8f81e24f50f6","slug":"hexo教程-教你半个小时搭建自己的博客","date":"2022-04-14T06:24:44.000Z","updated":"2022-04-20T05:39:36.523Z","comments":true,"path":"api/articles/hexo教程-教你半个小时搭建自己的博客.json","cover":[],"text":" 前言 hexo是一个相当好用的博客框架，仅仅用短短的几十分钟就可以上手。 本文会着重于hexo的使用，在开始之前，请确保安装好git和node.js，涉及到这个部分的教程在网上都很多，在这里不会额外介绍。 如果想快速看到效果，请务必按照下面的步骤执行。 博客地址:http://...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":1,"path":"api/categories/教程.json"}],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1429胜利大逃亡(续)","uid":"98b45b9456085a7bd89a44573d5e4235","slug":"BFS-1429胜利大逃亡-续","date":"2022-04-14T05:06:49.000Z","updated":"2022-04-14T05:19:29.597Z","comments":true,"path":"api/articles/BFS-1429胜利大逃亡-续.json","cover":[],"text":"1429 胜利大逃亡(续) 题意： 思路： 本题的重点在于标记数组，除了基本的坐标以外，在同一位置是否有某个钥匙显然会影响结果，所以这样一来，我们就要为每个钥匙拥有与否多开一维数组，这样总共就会有12维的标记数组。但这样显然是不方便的，我们就可以用二进制数来代替，这就是状态压缩。...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1254推箱子","uid":"907654ea5663a4368dcac6ec50f50e0b","slug":"BFS-1254推箱子","date":"2022-04-14T05:06:25.000Z","updated":"2022-04-14T05:20:09.967Z","comments":true,"path":"api/articles/BFS-1254推箱子.json","cover":[],"text":"1254推箱子 题意： 思路： 箱子的移动按照正常的BFS拓展即可。重点在于判断搬运工能否把箱子往某个方向推： 显然，箱子需要移动到，搬运工需要移动到 箱子所在的位置对搬运工来说是无法跨越的障碍。 搬运工能否到达目标地并不能简单的判断，需要再用BFS来判断可行性(总的来说，出现了...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1495非常可乐","uid":"e8cb84f974ea3f0e5a5c5a284c7fbc6b","slug":"BFS-1495非常可乐","date":"2022-04-14T05:06:14.000Z","updated":"2022-04-14T05:20:09.025Z","comments":true,"path":"api/articles/BFS-1495非常可乐.json","cover":[],"text":"1495 非常可乐 题目： 思路： 抽象BFS，把三个杯子的水量抽象成的一个三维坐标，并按照题目要求修改拓展方式，在此基础上BFS即可(可以理解为在三维空间的BFS)。拓展方式： 对于一个坐标一定要转移到类似于或者等，其实就是模拟倒水过程，倒水过程要么倒水杯为空或者被倒水杯已满。...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--胜利大逃亡","uid":"eeb246d9896a7a0782afd0a59c27d35d","slug":"BFS-胜利大逃亡","date":"2022-04-14T05:05:43.000Z","updated":"2022-04-14T05:19:54.477Z","comments":true,"path":"api/articles/BFS-胜利大逃亡.json","cover":[],"text":"1253 胜利大逃亡 题意： 思路： 将BFS原来二维的部分改成三维，其余部分均不变即可。注： 用cin读入要关流，否则会超时 读入优化代码： std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.t...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1242Rescue","uid":"4642bf8fd86a906e3377d06b9ee7f52a","slug":"BFS-1242Rescue","date":"2022-04-14T05:05:30.000Z","updated":"2022-04-14T05:19:43.465Z","comments":true,"path":"api/articles/BFS-1242Rescue.json","cover":[],"text":"1242 Rescue 题意： 解释如下： ：终点：起点路You can't use 'macro parameter character #' in math mode{\\color{red}#：障碍}敌人需要花一个单位时间打败 输出从起点到终点的最小步数，如果不存在路径，输出...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}