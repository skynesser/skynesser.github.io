{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"hexo教程--教你半个小时搭建自己的博客","uid":"f5cdf4952ba5a694914b8f81e24f50f6","slug":"hexo教程-教你半个小时搭建自己的博客","date":"2022-04-14T06:24:44.000Z","updated":"2022-04-16T16:03:11.101Z","comments":true,"path":"api/articles/hexo教程-教你半个小时搭建自己的博客.json","keywords":null,"cover":[],"text":" 前言 hexo是一个相当好用的博客框架，仅仅用短短的几十分钟就可以上手。 本文会着重于hexo的使用，在开始之前，请确保安装好git和node.js，涉及到这个部分的教程在网上都很多，在这里不会额外介绍。 如果想快速看到效果，请务必按照下面的步骤执行。 博客地址:http://...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"BFS--1429胜利大逃亡(续)","uid":"98b45b9456085a7bd89a44573d5e4235","slug":"BFS-1429胜利大逃亡-续","date":"2022-04-14T05:06:49.000Z","updated":"2022-04-14T05:19:29.597Z","comments":true,"path":"api/articles/BFS-1429胜利大逃亡-续.json","keywords":null,"cover":[],"text":"1429 胜利大逃亡(续) 题意： 思路： 本题的重点在于标记数组，除了基本的坐标以外，在同一位置是否有某个钥匙显然会影响结果，所以这样一来，我们就要为每个钥匙拥有与否多开一维数组，这样总共就会有12维的标记数组。但这样显然是不方便的，我们就可以用二进制数来代替，这就是状态压缩。...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"BFS--1254推箱子","uid":"907654ea5663a4368dcac6ec50f50e0b","slug":"BFS-1254推箱子","date":"2022-04-14T05:06:25.000Z","updated":"2022-04-14T05:20:09.967Z","comments":true,"path":"api/articles/BFS-1254推箱子.json","keywords":null,"cover":[],"text":"1254推箱子 题意： 思路： 箱子的移动按照正常的BFS拓展即可。重点在于判断搬运工能否把箱子往某个方向推： 显然，箱子需要移动到，搬运工需要移动到 箱子所在的位置对搬运工来说是无法跨越的障碍。 搬运工能否到达目标地并不能简单的判断，需要再用BFS来判断可行性(总的来说，出现了...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"BFS--1495非常可乐","uid":"e8cb84f974ea3f0e5a5c5a284c7fbc6b","slug":"BFS-1495非常可乐","date":"2022-04-14T05:06:14.000Z","updated":"2022-04-14T05:20:09.025Z","comments":true,"path":"api/articles/BFS-1495非常可乐.json","keywords":null,"cover":[],"text":"1495 非常可乐 题目： 思路： 抽象BFS，把三个杯子的水量抽象成的一个三维坐标，并按照题目要求修改拓展方式，在此基础上BFS即可(可以理解为在三维空间的BFS)。拓展方式： 对于一个坐标一定要转移到类似于或者等，其实就是模拟倒水过程，倒水过程要么倒水杯为空或者被倒水杯已满。...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--胜利大逃亡","uid":"eeb246d9896a7a0782afd0a59c27d35d","slug":"BFS-胜利大逃亡","date":"2022-04-14T05:05:43.000Z","updated":"2022-04-14T05:19:54.477Z","comments":true,"path":"api/articles/BFS-胜利大逃亡.json","keywords":null,"cover":[],"text":"1253 胜利大逃亡 题意： 思路： 将BFS原来二维的部分改成三维，其余部分均不变即可。注： 用cin读入要关流，否则会超时 读入优化代码： std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.t...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1242Rescue","uid":"4642bf8fd86a906e3377d06b9ee7f52a","slug":"BFS-1242Rescue","date":"2022-04-14T05:05:30.000Z","updated":"2022-04-14T05:19:43.465Z","comments":true,"path":"api/articles/BFS-1242Rescue.json","keywords":null,"cover":[],"text":"1242 Rescue 题意： 解释如下： ：终点：起点路You can't use 'macro parameter character #' in math mode{\\color{red}#：障碍}敌人需要花一个单位时间打败 输出从起点到终点的最小步数，如果不存在路径，输出...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1181变形课","uid":"fc4a684f7b377b87f7fe86a8b5c2db69","slug":"BFS-1181变形课","date":"2022-04-14T05:05:14.000Z","updated":"2022-04-14T05:19:32.539Z","comments":true,"path":"api/articles/BFS-1181变形课.json","keywords":null,"cover":[],"text":"1181 变形课 题意： 思路：把题目抽象成图，抽象方法如下: 起点：b终点：m路径：对于一个字符串，表示从到存在一条路径。根据如上规则建图bfs即可。 AC代码：#include&lt;bits/stdc++.h&gt; typedef long long ll; const ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1180诡异的楼梯","uid":"87d1f3817eb5ea98b0e200ea76c187c4","slug":"BFS-1180诡异的楼梯","date":"2022-04-14T05:04:47.000Z","updated":"2022-04-14T05:19:26.749Z","comments":true,"path":"api/articles/BFS-1180诡异的楼梯.json","keywords":null,"cover":[],"text":"1180诡异的楼梯 题意： 中文题面，题意也比较直接，直接上原题。 思路：在楼梯不能通过的时候，原地等待一个单位时间就可以了。 注：本题还有一种优先队列的做法，我们可以认为通过一个当前无法通过的楼梯，所花费的时间是2个单位时间(加上等待的时间)，但是这样做会使得队列中每次出队的不...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1175连连看","uid":"2e4ec95259d8f5d717fa4f2ca765d07a","slug":"BFS-1175连连看","date":"2022-04-14T05:04:31.000Z","updated":"2022-04-14T05:12:03.650Z","comments":true,"path":"api/articles/BFS-1175连连看.json","keywords":null,"cover":[],"text":"1175连连看 @[toc]题意： 给出一个的棋盘，玩一个类似于连连看的游戏。 1 2 3 40 0 0 04 3 2 1 ：空格其他：不同的棋子给定棋盘以后，给定起点和终点，要求从起点走到终点，方向转折的次数不能超过2次。 思路： 这题的限制不再是步数，而是转折次数，这就注定了...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BFS--1072 Nightmare","uid":"cf6e09e51125ac3f1f40b26cf31e9a4d","slug":"BFS-1072-Nightmare","date":"2022-04-14T05:04:12.000Z","updated":"2022-04-14T05:19:22.289Z","comments":true,"path":"api/articles/BFS-1072-Nightmare.json","keywords":null,"cover":[],"text":"1072 Nightmare 题意： 小明被困在一个迷宫如下中：1.小明每次可以花一个单位时间往上下左右的某个方向移动一格。2.小明身上有一个炸弹，在第6个单位时间就会爆炸，在第6个单位时间走到终点或者刷新炸弹时间是无效的。 举例如下：2 1 1 0 1 1 1 01 0 4 1...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"0x01位运算--起床困难综合症","uid":"bd5b7856161209228b064ee3a7d6843f","slug":"0x01位运算-起床困难综合症","date":"2022-04-14T05:00:21.000Z","updated":"2022-04-14T05:12:01.305Z","comments":true,"path":"api/articles/0x01位运算-起床困难综合症.json","keywords":null,"cover":[],"text":"0x01位运算——起床困难综合症 思路分析 位运算的特点之一就是二进制下运算不进位。因此在可以任意选择的情况下，参与位运算的各个位(bit)是无关的。 而每一个的初始取值只有0和1两种情况，所以我们只需要枚举每一位，比较初始取值0和1情况下，经过n个防御门后得到的值，在0和1这两...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"0x01位运算--最短Hamilton路径","uid":"5e6fa880a2b85943c805a5daeb5a1a2c","slug":"0x01位运算-最短Hamilton路径","date":"2022-04-14T04:59:38.000Z","updated":"2022-04-14T05:11:49.611Z","comments":true,"path":"api/articles/0x01位运算-最短Hamilton路径.json","keywords":null,"cover":[],"text":"0x01位运算——最短Hamilton路径 说明 本题的正解——状态压缩dp，我们将在0x56节详细介绍 思路分析 我们可以使用一个**n维的bool数组**记录下某时刻经过了哪些点，未经过哪些点，而这里的**n维的bool数组**，可以用一个n位的二进制数代替。 在这个二进制数...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"0x01位运算--64位整数乘法","uid":"97612da9b20c890887f4d716902dc0f2","slug":"0x01位运算-64位整数乘法","date":"2022-04-14T04:58:43.000Z","updated":"2022-04-14T05:11:44.147Z","comments":true,"path":"api/articles/0x01位运算-64位整数乘法.json","keywords":null,"cover":[],"text":"0x01 位运算——64位整数乘法 问题简析 C++内置的最高整数类型是64位，所以显然不能通过直接运算得到答案，我们需要一些特殊的处理方法，在这里提供两种方法。 思路一 类似于快速幂的思想，把b拆分成k位二进制。$b=C_{k-1}2^{k-1}+C_{k-2}2^{k-2}…...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"0x01位运算--a^b","uid":"2fe208e266b9d06ce4fcbff1033f1615","slug":"0x01位运算-a-b","date":"2022-04-14T04:57:50.000Z","updated":"2022-04-14T05:11:58.900Z","comments":true,"path":"api/articles/0x01位运算-a-b.json","keywords":null,"cover":[],"text":"0x01位运算——a^b 题目： 思路分析 如果在二进制下有位每一位为可以将分解为：$b=C_{k-1}2^{k-1}+C_{k-2}2^{k-2}+…+C_{0}*2^{0}因为2^{k-1}=(2^{k-2})^{2},所以很容易用递推求出每一个乘积项$ 时间复杂度分析 ，所...","link":"","photos":[],"count_time":{"symbolsCount":723,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"0x01——位运算","uid":"e27ecc703f2c8f1506aebea43aaa01a7","slug":"0x01——位运算","date":"2022-04-13T13:14:40.000Z","updated":"2022-04-14T05:11:53.473Z","comments":true,"path":"api/articles/0x01——位运算.json","keywords":null,"cover":null,"text":"基础知识及二进制常见用法 前言 bit是度量信息的单位，包含0和1两种状态。计算机的各种运算最后无不归结位一个个bit的变化。熟练掌握并利用位运算，能够帮助我们理解程序运行中的种种表现，提高程序循行的时空效率，降低编程复杂度。 运算符优先级 从左到右优先级依次降低| 加减 |移位...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"最小二乘法","uid":"f65394965aa072446681bba60362a87b","slug":"最小二乘法","date":"2022-04-13T13:12:41.000Z","updated":"2022-04-14T05:19:35.734Z","comments":true,"path":"api/articles/最小二乘法.json","keywords":null,"cover":[],"text":"最小二乘法从高数分数预测开始 给一组数据如下：|认真听课的时间|最后的考试分数||-|-||20|40||25|60||30|75||35|80||40|85||45|100|我们假设认真听课的时间为，最后的考试分数为。并且假设两者间的关系为一个线性函数：那么我们要怎么通过上面的...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Codeforces Round 781 (Div. 2)","uid":"0e8f626ea0dbc25b970b50c6d6ca6667","slug":"Codeforces-Round-781-Div-2","date":"2022-04-12T10:34:34.000Z","updated":"2022-04-14T05:19:07.951Z","comments":true,"path":"api/articles/Codeforces-Round-781-Div-2.json","keywords":null,"cover":[],"text":" A. GCD vs LCM题意： 给定数n，找到a,b,c,d四个数满足下列条件： 1.2. 思路： 取特殊情况，令即可。即构造 时间复杂度： 所需时间与输入规模无关: AC代码： #include&lt;bits/stdc++.h&gt; const int N = 2e2+...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"Codeforces","slug":"Codeforces","count":4,"path":"api/categories/Codeforces.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Codeforces Round 780 (Div. 3)","uid":"a755efac510fc930070b9bd1314d7bb8","slug":"Codeforces-Round-780-Div-3","date":"2022-04-12T10:34:26.000Z","updated":"2022-04-14T05:18:57.015Z","comments":true,"path":"api/articles/Codeforces-Round-780-Div-3.json","keywords":null,"cover":[],"text":" A. Vasya and Coins题意： 小明有枚1元硬币和枚2元硬币，输出小明无法支付的最小金额。 思路： 没有1元硬币： 答案为1 有1元硬币： 答案为 时间复杂度： AC代码： 在这里插入代码片#include&lt;bits/stdc++.h&gt; typedef ...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Codeforces","slug":"Codeforces","count":4,"path":"api/categories/Codeforces.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Codeforces Round 779 (Div. 2)(Permutationforces)","uid":"125917e35db77b388a3d8bf4e666f8ce","slug":"Codeforces-Round-779-Div-2-Permutationforces","date":"2022-04-12T10:33:55.000Z","updated":"2022-04-14T05:20:08.174Z","comments":true,"path":"api/articles/Codeforces-Round-779-Div-2-Permutationforces.json","keywords":null,"cover":[],"text":" A. Marin and Photoshoot题意： 给定一个由0和1组成的序列，现在可以往这个序列中添加1，是的这个序列满足如下要求：对于任意长度大于等于2的区间，要求这个区间中1的个数大于等于0的个数。 思路： 添加1，使得序列中不存在如下情况：00或者010即保证两个0之...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"Codeforces","slug":"Codeforces","count":4,"path":"api/categories/Codeforces.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"CodeTON Round 1 (Div. 1 + Div. 2, Rated, Prizes)","uid":"e46a6dad08206a9d3e04ebe2b2c5fc2a","slug":"CodeTON-Round-1-Div-1-Div-2-Rated-Prizes","date":"2022-04-12T10:33:21.000Z","updated":"2022-04-14T05:19:38.931Z","comments":true,"path":"api/articles/CodeTON-Round-1-Div-1-Div-2-Rated-Prizes.json","keywords":null,"cover":[],"text":" A. Good Pairs题意： 给定一个长度为n的序列：现在要找到一对下标满足：对所有的成立 思路： 显然只要和是最大值是最小值即可。 时间复杂度： AC代码: #include&lt;bits/stdc++.h&gt; typedef long long ll; const...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Codeforces","slug":"Codeforces","count":4,"path":"api/categories/Codeforces.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"AtCoder Beginner Contest 245","uid":"75e163e1709c0c17a44785b1605f0bc1","slug":"AtCoder-Beginner-Contest-245","date":"2022-04-12T10:32:05.000Z","updated":"2022-04-14T05:18:36.578Z","comments":true,"path":"api/articles/AtCoder-Beginner-Contest-245.json","keywords":null,"cover":[],"text":" A - Good morning题意： 语法题：给定两个起床时间。若第一个早于等于第二个，输出，反之输出。 思路： 见代码 时间复杂度： AC代码：#include&lt;bits/stdc++.h&gt; typedef long long ll; const int N =...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Atcoder","slug":"Atcoder","count":2,"path":"api/categories/Atcoder.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"AtCoder Beginner Contest 246","uid":"3e603a5ebaa3bb11ce97c7711a41ebdb","slug":"AtCoder-Beginner-Contest-246","date":"2022-04-12T09:34:16.000Z","updated":"2022-04-14T05:18:54.676Z","comments":true,"path":"api/articles/AtCoder-Beginner-Contest-246.json","keywords":null,"cover":[],"text":" A - Four Points题意： 给出三个点，找到一个点，让这4个点组成一个矩形 思路： 分别找到横纵坐标中只有一个的值。 时间复杂度： AC代码： #include&lt;bits/stdc++.h&gt; typedef long long ll; const int ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Atcoder","slug":"Atcoder","count":2,"path":"api/categories/Atcoder.json"}],"tags":[{"name":"algorithm","slug":"algorithm","count":6,"path":"api/tags/algorithm.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":2,"tags":6,"word_count":"80k","post_count":22}