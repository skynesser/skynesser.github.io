{"title":"从零开始搭建一个Django项目","uid":"50f14af361b5ce5f9849019a1a2caed8","slug":"从零开始搭建一个Django项目","date":"2022-06-22T09:16:51.000Z","updated":"2022-06-22T09:17:28.318Z","comments":true,"path":"api/articles/从零开始搭建一个Django项目.json","keywords":null,"cover":null,"content":"<h1 id=\"从零快速搭建Django\"><a href=\"#从零快速搭建Django\" class=\"headerlink\" title=\"从零快速搭建Django\"></a>从零快速搭建Django</h1><p>下面将会从零搭建起一个投票管理系统</p>\n<h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install django </code></pre>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">django-admin startproject 文件夹名\ndjango-admin startproject mysite</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py runserver 监听地址\n默认为8000端口</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py startapp app名\npython manage.py startapp polls</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py</code></pre>\n<h2 id=\"编辑视图\"><a href=\"#编辑视图\" class=\"headerlink\" title=\"编辑视图\"></a>编辑视图</h2><p>在app下新建一个<code>view.py</code>用于存放所有视图</p>\n<p>用<code>HttpResponse</code>来返回一个结果</p>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")</code></pre>\n<p><code>polls/urls.py</code>中配置路由<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]</code></pre><br><code>mysite/urls.py</code>文件中修改如下<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]</code></pre></p>\n<ul>\n<li><p><code>include</code>:在路径匹配到polls时把剩下的部分交给<code>polls.url</code>处理</p>\n</li>\n<li><p><code>path()</code>:</p>\n<ul>\n<li>route: 路由配置</li>\n<li>view: 返回视图</li>\n<li>kwargs: 以字典传递参数</li>\n<li>name: 路由名字</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"模型与数据库\"><a href=\"#模型与数据库\" class=\"headerlink\" title=\"模型与数据库\"></a>模型与数据库</h2><p>django默认内置SQLite，这里也将会使用这个数据库</p>\n<p>创建出内置的数据表<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py migrate</code></pre></p>\n<p>再创建出项目所需的数据表<br><code>polls/models.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre></p>\n<p>接着我们要去注册这个app，在<code>polls/apps.py</code>中我们可以发现<code>PollsConfig</code>类，我们把这个类注册到<code>mysite/settings.py</code>中<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">INSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]</code></pre></p>\n<p>修改完模型文件并且完成注册以后，通过下面的命令创建相应的python代码<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py makemigrations polls</code></pre></p>\n<ul>\n<li>会自动根据模型创建代码</li>\n<li>会自动增加主键id</li>\n</ul>\n<p>接下来我们需要真正取创建数据表<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py imgrate</code></pre></p>\n<p>我们继续通过重写<code>__str__</code>方法来增加可读性<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text</code></pre></p>\n<h2 id=\"创建一个管理员账号\"><a href=\"#创建一个管理员账号\" class=\"headerlink\" title=\"创建一个管理员账号\"></a>创建一个管理员账号</h2><p>django认为为你的员工或者客户生成一个用户来添加、修改和删除内容是一项乏味的工作，因此，将页面的展示和后台的管理分离，Django会全自动地根据模型创建后台界面</p>\n<p>首先我们来创建一个管理员账户<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">py manage.py createsuperuser</code></pre><br>接下来按提示依次输入用户名、邮件地址和密码即可。</p>\n<h2 id=\"启动开发服务器\"><a href=\"#启动开发服务器\" class=\"headerlink\" title=\"启动开发服务器\"></a>启动开发服务器</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">py manage.py runserver</code></pre>\n<p>通过访问下面这个URL，你可以进入你的管理员登录界面<br><code>http://127.0.0.1:8000/admin/</code></p>\n<h2 id=\"进入管理站点页面\"><a href=\"#进入管理站点页面\" class=\"headerlink\" title=\"进入管理站点页面\"></a>进入管理站点页面</h2><p>用你创建地超级用户来登录，然后你可以在这里编辑很多东西</p>\n<h2 id=\"向管理页面中加入投票应用\"><a href=\"#向管理页面中加入投票应用\" class=\"headerlink\" title=\"向管理页面中加入投票应用\"></a>向管理页面中加入投票应用</h2><p>但是我们会发现此时还没有投票应用，我们需要在<code>polls/admin.py</code>中注册</p>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)</code></pre>\n<p>接下来再次启动服务，你就可以体会到django给你带来地便捷服务</p>\n<h2 id=\"编辑更多的视图\"><a href=\"#编辑更多的视图\" class=\"headerlink\" title=\"编辑更多的视图\"></a>编辑更多的视图</h2><p>在django中，URL将会使用restful风格，把参数添加在路径中</p>\n<p>在<code>polls/views.py</code>和<code>polls/urls.py</code>中修改以下内容</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def detail(request, question_id):\n    return HttpResponse(\"You're looking at question %s.\" % question_id)\n\ndef results(request, question_id):\n    response = \"You're looking at the results of question %s.\"\n    return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n    return HttpResponse(\"You're voting on question %s.\" % question_id)</code></pre>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ex: /polls/\n    path('', views.index, name='index'),\n    # ex: /polls/5/\n    path('&lt;int:question_id&gt;/', views.detail, name='detail'),\n    # ex: /polls/5/results/\n    path('&lt;int:question_id&gt;/results/', views.results, name='results'),\n    # ex: /polls/5/vote/\n    path('&lt;int:question_id&gt;/vote/', views.vote, name='vote'),\n]</code></pre>\n<h2 id=\"写一个真正有用的视图\"><a href=\"#写一个真正有用的视图\" class=\"headerlink\" title=\"写一个真正有用的视图\"></a>写一个真正有用的视图</h2><p>上面的视图都只是一个框架，并没有实质性的内容，下面我们对每个页面都去添加具体的功能。</p>\n<p>对于一个视图，我们要明白它必须完成的任务:</p>\n<ul>\n<li>返回一个HttpResponse</li>\n<li>或者返回一个Http404</li>\n</ul>\n<p><code>polls/view.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.http import HttpResponse\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\n    output = ', '.join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)\n\n# Leave the rest of the views (detail, results, vote) unchanged</code></pre></p>\n<p>建立文件<code>polls/templates/polls/index.html</code><br><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">{% if latest_question_list %}\n    &lt;ul&gt;\n    {% for question in latest_question_list %}\n        &lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n{% else %}\n    &lt;p&gt;No polls are available.&lt;/p&gt;\n{% endif %}</code></pre></p>\n<p>接着我们使用这一个模板<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\n    context = {'latest_question_list': latest_question_list}\n    return render(request, 'polls/index.html', context)</code></pre></p>\n<p>继续编辑页面</p>\n<p><code>polls/detail.html</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;</code></pre></p>\n<h2 id=\"抛出404错误\"><a href=\"#抛出404错误\" class=\"headerlink\" title=\"抛出404错误\"></a>抛出404错误</h2><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.shortcuts import get_object_or_404, render\n\nfrom .models import Question\n# ...\ndef detail(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, 'polls/detail.html', {'question': question})</code></pre>\n<p>使用<code>get_object_or_404()</code>可以获取一个对象在失败时可以抛出Http404</p>\n<h2 id=\"去除模板中的硬编码URL\"><a href=\"#去除模板中的硬编码URL\" class=\"headerlink\" title=\"去除模板中的硬编码URL\"></a>去除模板中的硬编码URL</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;</code></pre>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;li&gt;&lt;a href=\"{% url 'detail' question.id %}\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;</code></pre>\n<p>将上面的URL改为下面这一种，原理是我们在<code>polls/urls.py</code>中为路由起了名字，在这里会通过这个名字和参数自动确定路径</p>\n<h2 id=\"为URL添加命名空间\"><a href=\"#为URL添加命名空间\" class=\"headerlink\" title=\"为URL添加命名空间\"></a>为URL添加命名空间</h2><p>在实际情况中，可能会有很多的app，这些app中很可能会有同名的模板文件，此时我们需要为每个app添加一个名字来区分他们</p>\n<p><code>polls/urls.py</code></p>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.urls import path\n\nfrom . import views\n\napp_name = 'polls'\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('&lt;int:question_id&gt;/', views.detail, name='detail'),\n    path('&lt;int:question_id&gt;/results/', views.results, name='results'),\n    path('&lt;int:question_id&gt;/vote/', views.vote, name='vote'),\n]</code></pre>\n<p>修改文件如下<br><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;li&gt;&lt;a href=\"{% url 'polls:detail' question.id %}\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;</code></pre></p>\n<h2 id=\"编写一个简单的表单\"><a href=\"#编写一个简单的表单\" class=\"headerlink\" title=\"编写一个简单的表单\"></a>编写一个简单的表单</h2><p><code>polls/templates/polls/detail.html</code><br><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;form action=\"{% url 'polls:vote' question.id %}\" method=\"post\"&gt;\n{% csrf_token %}\n&lt;fieldset&gt;\n    &lt;legend&gt;&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;&lt;/legend&gt;\n    {% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/strong&gt;&lt;/p&gt;{% endif %}\n    {% for choice in question.choice_set.all %}\n        &lt;input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\"&gt;\n        &lt;label for=\"choice{{ forloop.counter }}\"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br&gt;\n    {% endfor %}\n&lt;/fieldset&gt;\n&lt;input type=\"submit\" value=\"Vote\"&gt;\n&lt;/form&gt;</code></pre></p>\n<p><code>{% csrf_token %}</code>是django内置的一个防止跨站点请求伪造的标签</p>\n<p>现在我们来重新书写我们的<code>polls/views.py</code>文件<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n# ...\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST['choice'])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(request, 'polls/detail.html', {\n            'question': question,\n            'error_message': \"You didn't select a choice.\",\n        })\n    else:\n        selected_choice.votes += 1\n        selected_choice.save()\n        # Always return an HttpResponseRedirect after successfully dealing\n        # with POST data. This prevents data from being posted twice if a\n        # user hits the Back button.\n        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))</code></pre></p>\n<ul>\n<li><code>httpResponseRedirect()</code>这是一个重定向函数</li>\n<li><code>revese()</code>避免了使用硬编码来书写URL</li>\n</ul>\n<p>然后，我们来继续完成<code>results</code>页面</p>\n<p><code>polls/views.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.shortcuts import get_object_or_404, render\n\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, 'polls/results.html', {'question': question})</code></pre><br><code>polls/templates/polls/results.html</code><br><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n&lt;a href=\"{% url 'polls:detail' question.id %}\"&gt;Vote again?&lt;/a&gt;</code></pre></p>\n<h2 id=\"使用通用视图\"><a href=\"#使用通用视图\" class=\"headerlink\" title=\"使用通用视图\"></a>使用通用视图</h2><p>对于如<code>index.html</code>、<code>results.html</code>和<code>detail.html</code>这种常用页面，python为我们内置了一些模板来帮助加速开发，这也增加了我们代码的复用性和简洁性</p>\n<p>修改<code>polls/urls.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.urls import path\n\nfrom . import views\n\napp_name = 'polls'\nurlpatterns = [\n    path('', views.IndexView.as_view(), name='index'),\n    path('&lt;int:pk&gt;/', views.DetailView.as_view(), name='detail'),\n    path('&lt;int:pk&gt;/results/', views.ResultsView.as_view(), name='results'),\n    path('&lt;int:question_id&gt;/vote/', views.vote, name='vote'),\n]</code></pre></p>\n<p>修改<code>polls/views.py</code><br><pre class=\"line-numbers language-none\"><code class=\"language-none\">from django.http import HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\nfrom django.views import generic\n\nfrom .models import Choice, Question\n\n\nclass IndexView(generic.ListView):\n    template_name = 'polls/index.html'\n    context_object_name = 'latest_question_list'\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by('-pub_date')[:5]\n\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = 'polls/detail.html'\n\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = 'polls/results.html'\n\n\ndef vote(request, question_id):\n    ... # same as above, no changes needed.</code></pre></p>\n<p>在每个class中都有很多的属性，这些属性大多会根据一定的规则生成默认值，当然我们也可以根据自己的需求显示得修改这些值</p>\n<h2 id=\"自定义应用的界面和风格\"><a href=\"#自定义应用的界面和风格\" class=\"headerlink\" title=\"自定义应用的界面和风格\"></a>自定义应用的界面和风格</h2><p>我们可以在静态目录下添加我们需要的静态文件</p>\n<p>创建文件<code>polls/static/polls/style.css</code><br><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">li a {\n    color: green;\n}</code></pre></p>\n<p><code>index/html</code><br><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">{% load static %}\n\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\"&gt;</code></pre></p>\n<h2 id=\"添加背景图\"><a href=\"#添加背景图\" class=\"headerlink\" title=\"添加背景图\"></a>添加背景图</h2><p><code>style.css</code><br><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">body {\n    background: white url(\"images/background.gif\") no-repeat;\n}</code></pre></p>\n<h2 id=\"自定义后台表单\"><a href=\"#自定义后台表单\" class=\"headerlink\" title=\"自定义后台表单\"></a>自定义后台表单</h2><p>之前我们在后台注册了<code>Question</code>，但是有些时候我们希望后台可以按照我们希望的方式来展示，我们可以注册一个模型来告诉django</p>\n<p><code>polls/admin</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.contrib import admin\n\nfrom .models import Question\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fields = ['pub_date', 'question_text']\n\nadmin.site.register(Question, QuestionAdmin)</code></pre></p>\n<p>我们需要遵循这样的原则，在<code>admin.site.register()</code>函数中的第二个参数添加我们所编写的后台类</p>\n<h2 id=\"添加关联对象\"><a href=\"#添加关联对象\" class=\"headerlink\" title=\"添加关联对象\"></a>添加关联对象</h2><p>我们可以像注册<code>Question</code>一样来注册<code>Choice</code>，但是我们希望我们可以在创建<code>Question</code>时就可以顺便完成<code>Choice</code>的创建，所以我们会采用别的方式<br><code>polls/admin.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.contrib import admin\n\nfrom .models import Choice, Question\n\n\nclass ChoiceInline(admin.StackedInline):\n    model = Choice\n    extra = 3\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None,               {'fields': ['question_text']}),\n        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),\n    ]\n    inlines = [ChoiceInline]\n\nadmin.site.register(Question, QuestionAdmin)</code></pre></p>\n<p><code>polls/admin.py</code>中的<code>QuestionAdmin</code>类中添加内容如下<br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">class QuestionAdmin(admin.ModelAdmin):\n    # ...\n    list_display = ('question_text', 'pub_date', 'was_published_recently')\n    list_filter = ['pub_date']\n    search_fields = ['question_text']</code></pre></p>\n<ul>\n<li><code>list_display</code>可以展示除了<code>__str__()</code>函数内容之外的字段</li>\n<li><code>list_filter</code>字段可以在根据内容过滤</li>\n<li><code>search_fields</code>可以增加一个搜索框</li>\n</ul>\n<p>美化<br><code>polls/models.py</code><br><pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\">from django.contrib import admin\n\nclass Question(models.Model):\n    # ...\n    @admin.display(\n        boolean=True,\n        ordering='pub_date',\n        description='Published recently?',\n    )\n    def was_published_recently(self):\n        now = timezone.now()\n        return now - datetime.timedelta(days=1) &lt;= self.pub_date &lt;= now</code></pre></p>\n<p>至此一个简单的投票应用就开发完成了</p>\n","feature":true,"text":"从零快速搭建Django下面将会从零搭建起一个投票管理系统 安装Djangopip install django 创建项目django-admin startproject 文件夹名 django-admin startproject mysite mysite/ manage....","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Django","slug":"Django","count":1,"path":"api/categories/Django.json"}],"tags":[{"name":"Web","slug":"Web","count":1,"path":"api/tags/Web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E9%9B%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADjango\"><span class=\"toc-text\">从零快速搭建Django</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Django\"><span class=\"toc-text\">安装Django</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">创建项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">编辑视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">模型与数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7\"><span class=\"toc-text\">创建一个管理员账号</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">启动开发服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E7%AB%99%E7%82%B9%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">进入管理站点页面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E6%8A%95%E7%A5%A8%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">向管理页面中加入投票应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">编辑更多的视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E6%9C%89%E7%94%A8%E7%9A%84%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">写一个真正有用的视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%9B%E5%87%BA404%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">抛出404错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%99%A4%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84%E7%A1%AC%E7%BC%96%E7%A0%81URL\"><span class=\"toc-text\">去除模板中的硬编码URL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BAURL%E6%B7%BB%E5%8A%A0%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">为URL添加命名空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">编写一个简单的表单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">使用通用视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E7%9A%84%E7%95%8C%E9%9D%A2%E5%92%8C%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">自定义应用的界面和风格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE\"><span class=\"toc-text\">添加背景图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8E%E5%8F%B0%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">自定义后台表单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">添加关联对象</span></a></li></ol></li></ol>","author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"leetcode第291场周赛","uid":"e70ca3e74280de6ebe98a68688893386","slug":"leetcode第291场周赛","date":"2022-05-01T07:57:42.000Z","updated":"2022-05-01T08:28:04.857Z","comments":true,"path":"api/articles/leetcode第291场周赛.json","keywords":null,"cover":null,"text":"leetcode第291场周赛PDF A.移除指定数字得到的最大结果题意: 给你一个表示某个正整数的字符串 number 和一个字符 digit 。从 number 中 恰好 移除 一个 等于 digit 的字符后，找出并返回按 十进制 表示 最大 的结果字符串。生成的测试用例满...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"题解","slug":"题解","count":9,"path":"api/categories/题解.json"}],"tags":[{"name":"leetcode","slug":"leetcode","count":1,"path":"api/tags/leetcode.json"}],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}