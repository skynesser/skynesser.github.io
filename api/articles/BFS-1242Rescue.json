{"title":"BFS--1242Rescue","uid":"4642bf8fd86a906e3377d06b9ee7f52a","slug":"BFS-1242Rescue","date":"2022-04-14T05:05:30.000Z","updated":"2022-04-14T05:19:43.465Z","comments":true,"path":"api/articles/BFS-1242Rescue.json","keywords":null,"cover":[],"content":"<h1 id=\"1242-Rescue\"><a href=\"#1242-Rescue\" class=\"headerlink\" title=\"1242 Rescue\"></a>1242 Rescue</h1><p><img src=\"https://img-blog.csdnimg.cn/c659dee2a5724e41ba5827bd801461e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdGltZXJfY2F0Y2g=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"请添加图片描述\"></p>\n<p><strong>题意：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><img src=\"https://img-blog.csdnimg.cn/a33afbf4c5f14c9495630f837b252adc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdGltZXJfY2F0Y2g=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>解释如下：</p>\n<blockquote>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.305ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3229 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mstyle\" fill=\"red\" stroke=\"red\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(529,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"mi\" transform=\"translate(1429,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">终</text></g><g data-mml-node=\"mi\" transform=\"translate(2329,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">点</text></g></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.129ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3151 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mstyle\" fill=\"red\" stroke=\"red\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(451,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"mi\" transform=\"translate(1351,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">起</text></g><g data-mml-node=\"mi\" transform=\"translate(2251,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">点</text></g></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.3ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1900.4 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mstyle\" fill=\"red\" stroke=\"red\"><g data-mml-node=\"mo\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(444.7,0)\"><path data-c=\"3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1000.4,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">路</text></g></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.113ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 11100 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"merror\" data-mjx-error=\"You can't use 'macro parameter character #' in math mode\" title=\"You can't use 'macro parameter character #' in math mode\"><rect data-background=\"true\" width=\"11100\" height=\"950\" y=\"-200\"></rect><title>You can't use 'macro parameter character #' in math mode</title><g data-mml-node=\"mtext\" style=\"font-family: serif\"><text data-variant=\"-explicitFont\" transform=\"scale(1,-1)\" font-size=\"884px\">{\\color{red}#：障碍}</text></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31.411ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 13883.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mstyle\" fill=\"red\" stroke=\"red\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1405.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">敌</text></g><g data-mml-node=\"mi\" transform=\"translate(2305.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">人</text></g><g data-mml-node=\"mo\" transform=\"translate(3205.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3594.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">需</text></g><g data-mml-node=\"mi\" transform=\"translate(4494.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">要</text></g><g data-mml-node=\"mi\" transform=\"translate(5394.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">花</text></g><g data-mml-node=\"mi\" transform=\"translate(6294.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">一</text></g><g data-mml-node=\"mi\" transform=\"translate(7194.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">个</text></g><g data-mml-node=\"mi\" transform=\"translate(8094.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">单</text></g><g data-mml-node=\"mi\" transform=\"translate(8994.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">位</text></g><g data-mml-node=\"mi\" transform=\"translate(9894.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(10794.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">间</text></g><g data-mml-node=\"mi\" transform=\"translate(11694.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">打</text></g><g data-mml-node=\"mi\" transform=\"translate(12594.6,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">败</text></g><g data-mml-node=\"mo\" transform=\"translate(13494.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></g></g></svg></mjx-container></p></blockquote>\n<p>输出从起点到终点的最小步数，如果不存在路径，输出”Poor ANGEL has to stay in the prison all his life.”。</p>\n</blockquote>\n<p><strong>思路：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们在拓展时，如果一个点是敌人，则会导致我们需要花2步才能走到这个点，这将导致 BFS 每次出队的不一定是队列中步数最小的点，所以我们要用一个优先队列代替队列，使得每次出队的都是最小步数的点这一性质。</p></blockquote>\n<p><strong>特别的，关于重载：</strong></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>step <span class=\"token operator\">&lt;</span> step<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>AC代码：</strong><br><img src=\"https://img-blog.csdnimg.cn/b04cdc2d511043abb8ab9210363a44ec.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">2e2</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>M <span class=\"token operator\">=</span> <span class=\"token number\">2e4</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">,</span>mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>step <span class=\"token operator\">&lt;</span> step<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">,</span>end_x<span class=\"token punctuation\">,</span>end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ne<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> book<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">OK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>x<span class=\"token operator\">&gt;</span>n<span class=\"token operator\">||</span>y<span class=\"token operator\">&gt;</span>m<span class=\"token operator\">||</span>book<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>priority_queue<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">&gt;</span> que<span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    book<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        que<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> tx <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ty <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">OK</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'x'</span><span class=\"token punctuation\">)</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Poor ANGEL has to stay in the prison all his life.\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//    std::ios::sync_with_stdio(false);</span>\n<span class=\"token comment\">//    std::cin.tie(nullptr);</span>\n<span class=\"token comment\">//    std::cout.tie(nullptr);</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'r'</span><span class=\"token punctuation\">)</span>start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span>start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span>end_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span>end_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1242 Rescue 题意： 解释如下： ：终点：起点路You can't use 'macro parameter character #' in math mode{\\color{red}#：障碍}敌人需要花一个单位时间打败 输出从起点到终点的最小步数，如果不存在路径，输出...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1242-Rescue\"><span class=\"toc-text\">1242 Rescue</span></a></li></ol>","author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BFS--胜利大逃亡","uid":"eeb246d9896a7a0782afd0a59c27d35d","slug":"BFS-胜利大逃亡","date":"2022-04-14T05:05:43.000Z","updated":"2022-04-14T05:19:54.477Z","comments":true,"path":"api/articles/BFS-胜利大逃亡.json","keywords":null,"cover":[],"text":"1253 胜利大逃亡 题意： 思路： 将BFS原来二维的部分改成三维，其余部分均不变即可。注： 用cin读入要关流，否则会超时 读入优化代码： std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.t...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BFS--1181变形课","uid":"fc4a684f7b377b87f7fe86a8b5c2db69","slug":"BFS-1181变形课","date":"2022-04-14T05:05:14.000Z","updated":"2022-04-14T05:19:32.539Z","comments":true,"path":"api/articles/BFS-1181变形课.json","keywords":null,"cover":[],"text":"1181 变形课 题意： 思路：把题目抽象成图，抽象方法如下: 起点：b终点：m路径：对于一个字符串，表示从到存在一条路径。根据如上规则建图bfs即可。 AC代码：#include&lt;bits/stdc++.h&gt; typedef long long ll; const ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}