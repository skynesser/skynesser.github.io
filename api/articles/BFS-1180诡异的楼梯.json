{"title":"BFS--1180诡异的楼梯","uid":"87d1f3817eb5ea98b0e200ea76c187c4","slug":"BFS-1180诡异的楼梯","date":"2022-04-14T05:04:47.000Z","updated":"2022-04-14T05:19:26.749Z","comments":true,"path":"api/articles/BFS-1180诡异的楼梯.json","keywords":null,"cover":[],"content":"<h1 id=\"1180诡异的楼梯\"><a href=\"#1180诡异的楼梯\" class=\"headerlink\" title=\"1180诡异的楼梯\"></a>1180诡异的楼梯</h1><p><img src=\"https://img-blog.csdnimg.cn/690f7cf6ee0d4f47810586d775759365.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdGltZXJfY2F0Y2g=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"请添加图片描述\"></p>\n<p><strong>题意：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>中文题面，题意也比较直接，直接上原题。<br><img src=\"https://img-blog.csdnimg.cn/b1129ee048354d92954219b416999c67.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdGltZXJfY2F0Y2g=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"请添加图片描述\"></p>\n<hr>\n<p><strong>思路：</strong><br>在楼梯不能通过的时候，原地等待一个单位时间就可以了。</p>\n<blockquote>\n<p>注：本题还有一种优先队列的做法，我们可以认为通过一个当前无法通过的楼梯，所花费的时间是2个单位时间(加上等待的时间)，但是这样做会使得队列中每次出队的不一定是步数最小的点，所以要用优先队列维护(其实没什么必要这样做，正常的bfs就可以解决)。</p></blockquote>\n</blockquote>\n<p><strong>AC代码：</strong></p>\n<ol>\n<li>不使用优先队列：<br><img src=\"https://img-blog.csdnimg.cn/cc79723eb7864a8e9ef2619a5a95b59b.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>M <span class=\"token operator\">=</span> <span class=\"token number\">2e4</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">,</span>mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>que<span class=\"token punctuation\">[</span>N<span class=\"token operator\">*</span>N<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> book<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">,</span>end_x<span class=\"token punctuation\">,</span>end_y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ne<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">OK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>x<span class=\"token operator\">&gt;</span>n<span class=\"token operator\">||</span>y<span class=\"token operator\">&gt;</span>m<span class=\"token operator\">||</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'*'</span><span class=\"token operator\">||</span>book<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tail <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>start_x<span class=\"token punctuation\">,</span>start_y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    book<span class=\"token punctuation\">[</span>start_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>start_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">&gt;=</span>head<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> que<span class=\"token punctuation\">[</span>head<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> end_x <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> end_y<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> tx <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ty <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">OK</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'.'</span><span class=\"token operator\">||</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'T'</span><span class=\"token punctuation\">)</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'-'</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i &lt; 2 表示上下移动</span>\n                    <span class=\"token punctuation\">{</span>\n                        tx <span class=\"token operator\">+=</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">OK</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>  que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temp<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        ty <span class=\"token operator\">+=</span> ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">OK</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span> que<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temp<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//    std::ios::sync_with_stdio(false);</span>\n<span class=\"token comment\">//    std::cin.tie(nullptr);</span>\n<span class=\"token comment\">//    std::cout.tie(nullptr);</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token operator\">&gt;&gt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'S'</span><span class=\"token punctuation\">)</span>start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span>start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'T'</span><span class=\"token punctuation\">)</span>end_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span>end_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>使用优先队列<br><img src=\"https://img-blog.csdnimg.cn/841a376dda274038a92ffdcb51188205.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">rep</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">endl</span> <span class=\"token char\">'\\n'</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&gt;</span>y<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\npriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">&gt;</span> que<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> g<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> book<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> head<span class=\"token punctuation\">,</span>tail<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> startx<span class=\"token punctuation\">,</span>starty<span class=\"token punctuation\">,</span>endx<span class=\"token punctuation\">,</span>endy<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ne<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span>\n    book<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    book<span class=\"token punctuation\">[</span>startx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>starty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>startx<span class=\"token punctuation\">,</span>starty<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tail<span class=\"token operator\">&gt;=</span>head<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        que<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        cout&lt;&lt;temp.x&lt;&lt;\" \"&lt;&lt;temp.y&lt;&lt;\" \"&lt;&lt;temp.step&lt;&lt;endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>x<span class=\"token operator\">==</span>endx<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token punctuation\">.</span>y<span class=\"token operator\">==</span>endy<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> tx <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ty <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>ty<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>tx<span class=\"token operator\">&gt;</span>n<span class=\"token operator\">||</span>ty<span class=\"token operator\">&gt;</span>m<span class=\"token operator\">||</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>g<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>g<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//奇数上下</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    tx<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ty<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    tx<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ty<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'|'</span><span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>g<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'-'</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    tx<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ty<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    tx<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ty<span class=\"token operator\">+=</span>ne<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    cin.tie(0);</span>\n<span class=\"token comment\">//    cout.tie(0);</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">&gt;&gt;</span>n<span class=\"token operator\">&gt;&gt;</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">&gt;&gt;</span> g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'S'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                startx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                starty <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'T'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                endx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                endy <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1180诡异的楼梯 题意： 中文题面，题意也比较直接，直接上原题。 思路：在楼梯不能通过的时候，原地等待一个单位时间就可以了。 注：本题还有一种优先队列的做法，我们可以认为通过一个当前无法通过的楼梯，所花费的时间是2个单位时间(加上等待的时间)，但是这样做会使得队列中每次出队的不...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1180%E8%AF%A1%E5%BC%82%E7%9A%84%E6%A5%BC%E6%A2%AF\"><span class=\"toc-text\">1180诡异的楼梯</span></a></li></ol>","author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BFS--1181变形课","uid":"fc4a684f7b377b87f7fe86a8b5c2db69","slug":"BFS-1181变形课","date":"2022-04-14T05:05:14.000Z","updated":"2022-04-14T05:19:32.539Z","comments":true,"path":"api/articles/BFS-1181变形课.json","keywords":null,"cover":[],"text":"1181 变形课 题意： 思路：把题目抽象成图，抽象方法如下: 起点：b终点：m路径：对于一个字符串，表示从到存在一条路径。根据如上规则建图bfs即可。 AC代码：#include&lt;bits/stdc++.h&gt; typedef long long ll; const ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BFS--1175连连看","uid":"2e4ec95259d8f5d717fa4f2ca765d07a","slug":"BFS-1175连连看","date":"2022-04-14T05:04:31.000Z","updated":"2022-04-14T05:12:03.650Z","comments":true,"path":"api/articles/BFS-1175连连看.json","keywords":null,"cover":[],"text":"1175连连看 @[toc]题意： 给出一个的棋盘，玩一个类似于连连看的游戏。 1 2 3 40 0 0 04 3 2 1 ：空格其他：不同的棋子给定棋盘以后，给定起点和终点，要求从起点走到终点，方向转折的次数不能超过2次。 思路： 这题的限制不再是步数，而是转折次数，这就注定了...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"skynesser","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}